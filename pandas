2877. Create a DataFrame from List

import pandas as pd

def createDataframe(student_data: List[List[int]]):
    columns = ['student_id', 'age']
    df = pd.DataFrame(student_data, columns = columns)
    return df


-- 262. Trips and Users

with a as(
select t. id, t.client_id, t.driver_id, t.city_id, t.status, t.request_at    
from Trips as t
left join users as u
on t.client_id = u.users_id 
left join users as u1
on t.driver_id = u1.users_id 
where u.banned = 'No' and u1.banned = 'No')

select request_at as Day,
round(sum(if(status='completed', 0, 1))/count(status),2) as 'Cancellation Rate'
from a
where request_at between '2013-10-01' and '2013-10-03'
group by request_at

-- another way

select request_at as Day,
round(sum(if(status='completed', 0, 1))/count(status),2) as 'Cancellation Rate'
from Trips
where request_at between '2013-10-01' and '2013-10-03'
and client_id not in (select client_id from Trips as t left join users as u on t. client_id = u. users_id where u.banned = 'Yes')
and driver_id not in (select driver_id from Trips as t left join users as u on t. driver_id = u. users_id where u.banned = 'Yes')
group by request_at

-- simplier way: since we already know the users fields are matching

select request_at as Day,
round(sum(if(status='completed', 0, 1))/count(status),2) as 'Cancellation Rate'
from Trips
where request_at between '2013-10-01' and '2013-10-03'
and client_id not in (select users_id from users where banned = 'Yes')
and driver_id not in (select users_id from users where banned = 'Yes')
group by request_at


-- 601. Human Traffic of Stadium
-- use where first, id - row_number() is consecutive number of people > 100
-- be aware consecutive is consecutive id, not vistit date 

with a as(select *,  id - row_number()over(order by id asc) as rnk
from stadium
where people>=100)

select id, visit_date, people
from a
where rnk in (select rnk from a group by rnk having count(rnk)>=3)

--570. Managers with at Least 5 Direct Reports: notice! id in, not managerId in ()

select name
from Employee
where id in
(select managerId from Employee group by managerId having  count(managerId) >= 5)

-- pandas
import pandas as pd
def find_managers(employee: pd.DataFrame) -> pd.DataFrame:
    # add a new column called count
    managers = employee.groupby(['managerId'])['managerId'].agg(['count']).reset_index()
    managers = managers.loc[managers['count']>= 5, ['managerId']]
    new_df = employee.loc[employee['id'].isin(managers['managerId']), ['name']]
    # new_df = employee[employee['id'].isin(managers['managerId'])][['name']]
    return new_df

